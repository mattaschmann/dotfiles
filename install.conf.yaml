- defaults:
    link:
      create: true
      relink: true
    shell:
      stdout: true
      stderr: true
      quiet: true

- clean: ['~']

- link:
    ~/.config/alacritty/alacritty.toml: alacritty/alacritty.toml
    ~/.config/coc/extensions/package.json: coc/package.json
    ~/.config/coc/ultisnips: coc/ultisnips
    ~/.config/nvim/coc-settings.json: nvim/coc-settings.json
    # ~/.config/nvim/init.vim: nvim/init.vim
    # ~/.config/nvim/config: nvim/config
    ~/.config/nvim/init.lua: nvim/init.lua
    ~/.config/nvim/lua: nvim/lua
    ~/.config/nvim/vimscripts: nvim/vimscripts
    ~/.ctags.d: universal_ctags
    ~/.dotfiles: ''
    ~/.ignore: rg/.ignore
    ~/.jsbeautifyrc: jsbeautify/.jsbeautifyrc
    ~/.tigrc: tig/.tigrc
    ~/.tmux.conf: tmux/.tmux.conf
    ~/.urlview: urlview/.urlview
    ~/.zprofile: zsh/.zprofile
    ~/.zsh_plugins.txt: zsh/.zsh_plugins.txt
    ~/.zshrc:
      path: zsh/.zshrc
      force: true

- create:
    - ~/bin
    - ~/opt
    - ~/.ssh

- shell:
    -
      description: Installing submodules
      command: git submodule update --init --recursive
    -
      description: Add special terminfos so we can use italics
      command: |
        tic terminfo/xterm-256color.terminfo
        tic terminfo/tmux.terminfo
        tic terminfo/xterm-256color.terminfo
    - description: Install apt packages
      command: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          ca-certificates \
          cmake \
          curl \
          htop \
          libbz2-dev \
          liblzma-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libreadline-dev \
          libsqlite3-dev \
          libssl-dev \
          llvm \
          make \
          neovim \
          nnn \
          pkg-config \
          tk-dev \
          tmux \
          unzip \
          wget \
          xz-utils \
          zlib1g-dev \
          zsh \
          keychain \
        && echo "Done"
    - description: Install rust packages
      command: |
        if ! command -v cargo &> /dev/null
        then
          echo "cargo not found"
          echo "see: https://www.rust-lang.org/learn/get-started"
          exit 1
        else
          cargo install cargo-update
          cargo install ripgrep
          cargo install bat
          cargo install exa
          cargo install fd-find
          cargo install starship --locked
        fi
    - description: Check for existence of desired commands
      command: |
        /bin/bash check_cmd.sh docker "https://docs.docker.com/engine/install/ubuntu/"
        /bin/bash check_cmd.sh pyenv "https://github.com/pyenv/pyenv"
        /bin/bash check_cmd.sh fnm "https://github.com/Schniz/fnm"
        /bin/bash check_cmd.sh starship "https://starship.rs/"
        /bin/bash check_cmd.sh fzf "https://github.com/junegunn/fzf"
        /bin/bash check_cmd.sh pyenv "https://github.com/pyenv/pyenv"
        /bin/bash check_cmd.sh pdm "https://pdm-project.org/en/latest/"
        /bin/bash check_cmd.sh nnn "https://github.com/jarun/nnn"
    - description: Check for existence of desired directories, in the case we can't check the command
      command: |
        /bin/bash check_dir.sh ~/.tmux/plugins/tpm "https://github.com/tmux-plugins/tpm"
        /bin/bash check_dir.sh ~/.antidote "https://github.com/mattmc3/antidote"
        /bin/bash check_dir.sh ~/.oh-my-zsh "https://ohmyz.sh/"
